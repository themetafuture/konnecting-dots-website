generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// Users table
model User {
  id            String   @id @default(cuid())
  email         String   @unique
  password      String?
  firstName     String   @map("first_name")
  lastName      String   @map("last_name")
  phone         String?
  role          String   @default("student")
  avatar        String?
  isActive      Boolean  @default(true) @map("is_active")
  emailVerified Boolean  @default(false) @map("email_verified")
  isApproved    Boolean  @default(false) @map("is_approved")
  approvedAt    DateTime? @map("approved_at")
  approvedBy    String?  @map("approved_by")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @default(now()) @map("updated_at")

  // Relations
  coursesAsInstructor Course[]      @relation("CourseInstructor")
  enrollments         Enrollment[]
  adminActions        AdminAction[]
  payments            Payment[]
  testimonials        Testimonial[]
  blogPosts           BlogPost[]
  events              Event[]
  studentApprovalsAsStudent StudentApproval[] @relation("StudentApprovalStudent")
  studentApprovalsAsReviewer StudentApproval[] @relation("StudentApprovalReviewer")

  @@map("users")
}


// Courses table
model Course {
  id           String  @id @default(cuid())
  title        String
  description  String?
  content      String?
  durationHours Int    @default(0) @map("duration_hours")
  price        Float   @default(0)
  status       String  @default("draft")
  instructorId String? @map("instructor_id")

  // Relations
  instructor   User?           @relation("CourseInstructor", fields: [instructorId], references: [id])
  modules      CourseModule[]
  enrollments  Enrollment[]
  events       Event[]
  payments     Payment[]
  testimonials Testimonial[]

  @@map("courses")
}

// Course modules table
model CourseModule {
  id          String  @id @default(cuid())
  courseId    String  @map("course_id")
  title       String
  description String?
  content     String?
  orderIndex  Int     @default(0) @map("order_index")
  isRequired  Boolean @default(true) @map("is_required")
  createdAt   DateTime @default(now()) @map("created_at")

  // Relations
  course   Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  progress Progress[]

  @@map("course_modules")
}

// Enrollments table
model Enrollment {
  id         String   @id @default(cuid())
  studentId  String   @map("student_id")
  courseId   String   @map("course_id")
  status     String   @default("pending")
  enrolledAt DateTime @default(now()) @map("enrolled_at")
  approvedAt DateTime? @map("approved_at")
  completedAt DateTime? @map("completed_at")

  // Relations
  student  User   @relation(fields: [studentId], references: [id])
  course   Course @relation(fields: [courseId], references: [id])
  progress Progress[]

  @@unique([studentId, courseId])
  @@map("enrollments")
}

// Progress table
model Progress {
  id                 String   @id @default(cuid())
  enrollmentId       String   @map("enrollment_id")
  moduleId           String   @map("module_id")
  status             String   @default("not_started")
  startedAt          DateTime? @map("started_at")
  completedAt        DateTime? @map("completed_at")
  progressPercentage Int      @default(0) @map("progress_percentage")

  // Relations
  enrollment Enrollment   @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  module     CourseModule @relation(fields: [moduleId], references: [id])

  @@unique([enrollmentId, moduleId])
  @@map("progress")
}

// Admin actions table
model AdminAction {
  id         String   @id @default(cuid())
  adminId    String   @map("admin_id")
  actionType String   @map("action_type")
  targetType String   @map("target_type")
  targetId   String   @map("target_id")
  details    String?  // JSON as string for SQLite
  createdAt  DateTime @default(now()) @map("created_at")

  // Relations
  admin User @relation(fields: [adminId], references: [id])

  @@map("admin_actions")
}

// Events table
model Event {
  id          String    @id @default(cuid())
  title       String
  description String?
  content     String?
  startDate   DateTime  @map("start_date")
  endDate     DateTime? @map("end_date")
  location    String?
  type        String    @default("workshop")
  status      String    @default("scheduled")
  courseId    String?   @map("course_id")
  instructorId String?  @map("instructor_id")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @default(now()) @map("updated_at")

  // Relations
  course     Course? @relation(fields: [courseId], references: [id])
  instructor User?   @relation(fields: [instructorId], references: [id])

  @@map("events")
}

// Blog posts table
model BlogPost {
  id          String    @id @default(cuid())
  title       String
  content     String
  excerpt     String?
  slug        String    @unique
  authorId    String    @map("author_id")
  category    String
  tags        String?   // JSON array as string
  status      String    @default("draft")
  featured    Boolean   @default(false)
  views       Int       @default(0)
  publishedAt DateTime? @map("published_at")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @default(now()) @map("updated_at")

  // Relations
  author User @relation(fields: [authorId], references: [id])

  @@map("blog_posts")
}

// Contact messages table
model ContactMessage {
  id        String   @id @default(cuid())
  name      String
  email     String
  phone     String?
  subject   String
  message   String
  service   String?
  status    String   @default("new")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  @@map("contact_messages")
}

// Payments table
model Payment {
  id            String   @id @default(cuid())
  studentId     String   @map("student_id")
  courseId      String   @map("course_id")
  amount        Float
  status        String   @default("pending")
  method        String
  transactionId String?  @map("transaction_id")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @default(now()) @map("updated_at")

  // Relations
  student User   @relation(fields: [studentId], references: [id])
  course  Course @relation(fields: [courseId], references: [id])

  @@map("payments")
}

// Testimonials table
model Testimonial {
  id        String   @id @default(cuid())
  studentId String   @map("student_id")
  courseId  String   @map("course_id")
  content   String
  rating    Int?
  status    String   @default("pending")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  // Relations
  student User   @relation(fields: [studentId], references: [id])
  course  Course @relation(fields: [courseId], references: [id])

  @@map("testimonials")
}

// Student approval requests table
model StudentApproval {
  id          String   @id @default(cuid())
  studentId   String   @map("student_id")
  status      String   @default("pending") // pending, approved, rejected
  requestedAt DateTime @default(now()) @map("requested_at")
  reviewedAt  DateTime? @map("reviewed_at")
  reviewedBy  String?  @map("reviewed_by")
  notes       String?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @default(now()) @map("updated_at")

  // Relations
  student   User  @relation("StudentApprovalStudent", fields: [studentId], references: [id])
  reviewer  User? @relation("StudentApprovalReviewer", fields: [reviewedBy], references: [id])

  @@map("student_approvals")
}