// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  firstName String
  lastName  String
  role      UserRole @default(STUDENT)
  phone     String?
  avatar    String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  enrollments Enrollment[]
  payments    Payment[]
  sessions    Session[]
  testimonials Testimonial[]
  blogPosts   BlogPost[]

  @@map("users")
}

model Course {
  id          String      @id @default(cuid())
  title       String
  slug        String      @unique
  description String
  content     String?
  price       Float
  duration    Int         // in hours
  level       CourseLevel
  category    CourseCategory
  status      CourseStatus @default(DRAFT)
  image       String?
  videoUrl    String?
  materials   String?     // JSON array of material URLs
  prerequisites String?
  learningOutcomes String?
  isPublished Boolean     @default(false)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relations
  enrollments Enrollment[]
  events      Event[]
  payments    Payment[]

  @@map("courses")
}

model Enrollment {
  id        String           @id @default(cuid())
  userId    String
  courseId  String
  status    EnrollmentStatus @default(ACTIVE)
  progress  Int              @default(0) // percentage
  startedAt DateTime?
  completedAt DateTime?
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  sessions  Session[]

  @@unique([userId, courseId])
  @@map("enrollments")
}

model Event {
  id          String      @id @default(cuid())
  title       String
  description String
  courseId    String?
  type        EventType
  status      EventStatus @default(SCHEDULED)
  startDate   DateTime
  endDate     DateTime
  location    String?
  maxAttendees Int?
  price       Float?
  image       String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relations
  course      Course?     @relation(fields: [courseId], references: [id], onDelete: SetNull)
  sessions    Session[]
  payments    Payment[]

  @@map("events")
}

model Session {
  id          String        @id @default(cuid())
  enrollmentId String?
  eventId     String?
  userId      String
  type        SessionType
  status      SessionStatus @default(SCHEDULED)
  scheduledAt DateTime
  duration    Int           // in minutes
  notes       String?
  recording   String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relations
  enrollment  Enrollment?   @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  event       Event?        @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Payment {
  id          String        @id @default(cuid())
  userId      String
  courseId    String?
  eventId     String?
  amount      Float
  currency    String        @default("USD")
  status      PaymentStatus @default(PENDING)
  method      PaymentMethod
  transactionId String?
  description String?
  metadata    String?       // JSON data
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relations
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  course      Course?       @relation(fields: [courseId], references: [id], onDelete: SetNull)
  event       Event?        @relation(fields: [eventId], references: [id], onDelete: SetNull)

  @@map("payments")
}

model BlogPost {
  id          String      @id @default(cuid())
  title       String
  slug        String      @unique
  content     String
  excerpt     String?
  authorId    String
  category    BlogCategory
  tags        String?     // JSON array
  status      PostStatus  @default(DRAFT)
  featured    Boolean     @default(false)
  image       String?
  readTime    Int?        // in minutes
  views       Int         @default(0)
  publishedAt DateTime?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relations
  author      User        @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@map("blog_posts")
}

model Testimonial {
  id        String   @id @default(cuid())
  content   String
  author    String
  position  String?
  company   String?
  rating    Int      @default(5)
  image     String?
  userId    String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user      User?    @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@map("testimonials")
}

model Contact {
  id        String      @id @default(cuid())
  name      String
  email     String
  phone     String?
  subject   String
  message   String
  status    ContactStatus @default(NEW)
  response  String?
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  @@map("contacts")
}

model Newsletter {
  id        String   @id @default(cuid())
  email     String   @unique
  status    String   @default("active")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("newsletter")
}

// Enums
enum UserRole {
  ADMIN
  INSTRUCTOR
  STUDENT
}

enum CourseLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  EXPERT
}

enum CourseCategory {
  NLP
  HYPNOSIS
  CORPORATE_TRAINING
  DEI_TRAINING
  TRAIN_THE_TRAINER
  PRACTITIONER
  PERSONAL_DEVELOPMENT
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum EnrollmentStatus {
  ACTIVE
  COMPLETED
  PAUSED
  CANCELLED
}

enum EventType {
  WORKSHOP
  SEMINAR
  CONFERENCE
  RETREAT
  ONLINE_SESSION
  ONE_ON_ONE
}

enum EventStatus {
  SCHEDULED
  ONGOING
  COMPLETED
  CANCELLED
}

enum SessionType {
  CONSULTATION
  COACHING
  TRAINING
  FOLLOW_UP
}

enum SessionStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  NO_SHOW
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
  CANCELLED
}

enum PaymentMethod {
  CREDIT_CARD
  BANK_TRANSFER
  PAYPAL
  STRIPE
  CASH
}

enum BlogCategory {
  NLP_TECHNIQUES
  HYPNOSIS
  CORPORATE_TRAINING
  PERSONAL_DEVELOPMENT
  CASE_STUDIES
  WELLNESS
  LEADERSHIP
}

enum PostStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum ContactStatus {
  NEW
  IN_PROGRESS
  RESOLVED
  CLOSED
}
